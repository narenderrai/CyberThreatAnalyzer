🎯 GoalCreate a well-formatted Threat Analysis Report display function in the ThreatAnalyzer class. The report should present analysis details and cyber threat data in an organized, easy-to-read structure—whether outputting to a console, log, or returning as a formatted string.🛠️ PrerequisitesBefore you start:Ensure the ThreatAnalyzer class includes:The ability to retrieve historical or current analysis (from your store_response() or get_historical_analysis() functions).Data from the API response or scraped web data that includes the fields to display.Familiarity with the structure and content of cyber threat data, including:Threat classificationsAttack vectorsTTPs (Tactics, Techniques, Procedures)Indicators of Compromise (IoCs)CVEsAttack timelinesIncident reportsThreat intelligence feeds📋 Task Details1. Create a Method generate_threat_report() in ThreatAnalyzerAccepts analysis_data as input, which contains:Threat classificationDetails about attack vectors, TTPs, IoCs, CVEs, timelines, etc.Returns a formatted string that can be printed or logged.2. Define the Report StructureStart with a header:Threat Analysis ReportAnalysis CompleteFollow with major sections:Analysis DetailsThreat ClassificationAttack VectorsTTPsIndicators of Compromise (IoCs)Common Vulnerabilities and Exposures (CVEs)Attack TimelinesIncident Reports and Case StudiesThreat Intelligence Feeds3. Format Each Section ClearlyUse numbered or bullet points for lists.Ensure sub-sections are properly indented for readability.Include example content when possible (like file hashes for IoCs or CVE IDs).4. Implement Display OptionsSupport outputting the report:To the console via print()As a string return value (to be logged, stored, or exported)5. Error HandlingEnsure that missing fields (e.g., if no CVEs are found) result in a placeholder message like:No Common Vulnerabilities and Exposures (CVEs) reported.✅ Success CriteriaThe generate_threat_report() method produces a structured, readable report.All sections are displayed even if some data fields are empty.The output matches the structure provided in your example:Clear headersBullet points or numbered lists for detailsExamples where relevantThe report can be printed or returned for storage/export.📂 Files Involvedthreat_analyzer.pyAdd the generate_threat_report() method.Optional: Update your export or UI display function if you want to show this in a dashboard or save it as a text report.📚 Docs / ReferencesPython String FormattingPandas DataFrame to StringPython Logging Module